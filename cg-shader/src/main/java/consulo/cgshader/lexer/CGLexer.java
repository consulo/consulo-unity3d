/*
 * Copyright 2013-2016 consulo.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.4 on 11.10.15 4:21 */

package consulo.cgshader.lexer;

import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 11.10.15 4:21 from the specification file
 * <tt>R:/_github.com/consulo/consulo-unity3d/cg-shader/src/org/mustbe/consulo/cgshader/lexer/cglexer.flex</tt>
 */
public class CGLexer extends LexerBase
{
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0,
			0
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\3\1\1\1\6\1\0\1\1\1\6\16\3\4\0\1\1\1\0" +
			"\1\25\1\34\1\2\2\0\1\23\1\26\1\27\1\5\1\21\1\0" +
			"\1\21\1\17\1\4\1\13\11\7\7\0\1\11\1\15\1\11\1\16" +
			"\1\20\1\16\5\2\1\12\3\2\1\22\7\2\1\14\2\2\1\32" +
			"\1\24\1\33\1\0\1\10\1\0\1\11\1\15\1\11\1\16\1\20" +
			"\1\16\5\2\1\12\3\2\1\22\7\2\1\14\2\2\1\30\1\0" +
			"\1\31\1\0\41\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0" +
			"\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0" +
			"\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\3\5\0" +
			"\23\3\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0" +
			"\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2\1\0" +
			"\4\3\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0" +
			"\46\2\2\0\1\2\7\0\47\2\11\0\21\3\1\0\27\3\1\0" +
			"\3\3\1\0\1\3\1\0\2\3\1\0\1\3\13\0\33\2\5\0" +
			"\3\2\15\0\4\3\14\0\6\3\13\0\32\2\5\0\13\2\16\3" +
			"\7\0\12\3\4\0\2\2\1\3\143\2\1\0\1\2\10\3\1\0" +
			"\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2\2\0\1\2" +
			"\17\0\1\3\1\2\1\3\36\2\33\3\2\0\3\2\60\0\46\2" +
			"\13\3\1\2\u014f\0\3\3\66\2\2\0\1\3\1\2\20\3\2\0" +
			"\1\2\4\3\3\0\12\2\2\3\2\0\12\3\21\0\3\3\1\0" +
			"\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0" +
			"\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\11\0" +
			"\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2\15\0" +
			"\3\3\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0" +
			"\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3\4\0" +
			"\2\3\2\0\3\3\13\0\4\2\1\0\1\2\7\0\14\3\3\2" +
			"\14\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2" +
			"\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3\1\0\3\3" +
			"\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0\12\3\1\0" +
			"\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0" +
			"\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\6\3\3\0" +
			"\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0\3\2\4\0" +
			"\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0\3\2" +
			"\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2" +
			"\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\3\3\0\3\3" +
			"\1\0\4\3\11\0\1\3\17\0\11\3\11\0\1\2\7\0\3\3" +
			"\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2" +
			"\4\0\7\3\1\0\3\3\1\0\4\3\7\0\2\3\11\0\2\2" +
			"\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2" +
			"\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3\1\0\3\3" +
			"\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2\4\0\12\3" +
			"\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2" +
			"\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3\10\0\2\2" +
			"\4\0\12\3\22\0\2\3\1\0\22\2\3\0\30\2\1\0\11\2" +
			"\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0\1\3" +
			"\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3\4\0" +
			"\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2" +
			"\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2" +
			"\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3\2\2" +
			"\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0\6\3" +
			"\2\0\12\3\2\0\2\2\42\0\1\2\27\0\2\3\6\0\12\3" +
			"\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2\1\0" +
			"\42\2\6\0\24\3\1\0\2\3\4\2\4\0\10\3\1\0\44\3" +
			"\11\0\1\3\71\0\42\2\1\0\5\2\1\0\2\2\1\0\7\3" +
			"\3\0\4\3\6\0\12\3\6\0\6\2\4\3\106\0\46\2\12\0" +
			"\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0" +
			"\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0" +
			"\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0" +
			"\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0" +
			"\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0" +
			"\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3\56\0" +
			"\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\3\0" +
			"\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3\13\0" +
			"\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0\64\2" +
			"\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0\3\3" +
			"\2\0\12\3\6\0\130\2\10\0\51\2\1\3\126\0\35\2\3\0" +
			"\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2\u038b\0\154\2" +
			"\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2" +
			"\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2" +
			"\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2" +
			"\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2" +
			"\1\0\7\2\17\0\4\3\32\0\5\3\20\0\2\2\23\0\1\2" +
			"\13\0\4\3\6\0\6\3\1\0\1\2\15\0\1\2\40\0\22\2" +
			"\36\0\15\3\4\0\1\3\3\0\6\3\27\0\1\2\4\0\1\2" +
			"\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2" +
			"\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2" +
			"\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\3\1\0" +
			"\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2\1\0" +
			"\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0" +
			"\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0" +
			"\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2\1\0" +
			"\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0" +
			"\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0" +
			"\20\3\20\0\4\3\17\0\2\2\30\0\3\2\31\0\1\2\6\0" +
			"\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3\7\0" +
			"\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2\2\0" +
			"\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0" +
			"\3\3\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\1\2\4\1\1\2\5" +
			"\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14" +
			"\1\15\5\4\3\5\1\0\1\16\1\15\2\4\3\0" +
			"\1\15";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[36];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313" +
			"\0\350\0\u0105\0\35\0\35\0\35\0\35\0\35\0\35" +
			"\0\u0122\0\u013f\0\u015c\0\35\0\u0179\0\u0196\0\u01b3\0\u01d0" +
			"\0\35\0\u01ed\0\u020a\0\u0122\0\u0227\0\u0244\0\u0261\0\u027e" +
			"\0\u029b\0\u02b8\0\u02d5\0\35";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[36];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\2\1\5\1\2\1\3\1\6" +
			"\3\4\1\7\3\4\1\10\1\4\1\2\1\4\1\11" +
			"\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20" +
			"\1\21\36\0\1\3\4\0\1\3\30\0\2\4\3\0" +
			"\10\4\1\0\1\4\1\0\1\4\16\0\1\22\1\23" +
			"\36\0\2\6\1\0\1\24\1\6\2\0\1\24\1\25" +
			"\1\26\23\0\2\6\1\0\1\24\1\6\1\27\1\30" +
			"\1\24\1\25\1\26\23\0\1\25\3\0\1\25\21\0" +
			"\6\11\1\0\14\11\1\31\1\32\10\11\6\12\1\0" +
			"\15\12\1\33\1\31\7\12\1\0\1\34\1\35\3\0" +
			"\1\34\1\0\3\35\1\0\3\35\1\0\1\35\1\0" +
			"\1\35\12\0\6\22\1\0\26\22\5\36\1\0\27\36" +
			"\7\0\2\25\2\0\1\25\2\0\1\24\1\0\1\26" +
			"\23\0\2\37\2\0\1\37\2\0\1\24\2\0\1\37" +
			"\22\0\3\40\1\24\1\40\1\0\2\40\1\41\1\40" +
			"\23\0\2\30\1\0\1\24\1\30\21\0\6\11\1\0" +
			"\26\11\6\12\1\0\26\12\2\0\2\35\3\0\10\35" +
			"\1\0\1\35\1\0\1\35\12\0\5\36\1\42\27\36" +
			"\7\0\2\37\2\0\1\37\2\0\1\24\25\0\3\40" +
			"\1\24\1\40\1\0\2\40\1\43\1\40\1\0\1\26" +
			"\21\0\3\43\1\0\1\43\1\0\2\43\1\0\1\43" +
			"\14\0\4\36\1\44\1\42\27\36\7\0\3\43\1\0" +
			"\1\43\1\0\2\43\1\0\1\43\1\0\1\26\12\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[754];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\10\1\6\11\3\1\1\11\4\1\1\11" + "\2\1\1\0\4\1\3\0\1\11";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[36];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	private IElementType myTokenType;
	private int myState;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed)
	{
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while(i < 1744)
		{
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
			{
				map[j++] = value;
			}
			while(--count > 0);
		}
		return map;
	}

	@Override
	public IElementType getTokenType()
	{
		if(myTokenType == null)
		{
			locateToken();
		}
		return myTokenType;
	}

	@Override
	public final int getTokenStart()
	{
		if(myTokenType == null)
		{
			locateToken();
		}
		return zzStartRead;
	}

	@Override
	public final int getTokenEnd()
	{
		if(myTokenType == null)
		{
			locateToken();
		}
		return getTokenStart() + yylength();
	}

	@Override
	public void advance()
	{
		if(myTokenType == null)
		{
			locateToken();
		}
		myTokenType = null;
	}

	@Override
	public int getState()
	{
		if(myTokenType == null)
		{
			locateToken();
		}
		return myState;
	}

	@Override
	public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState)
	{
		reset(buffer, startOffset, endOffset, initialState);
		myTokenType = null;
	}

	@Override
	public CharSequence getBufferSequence()
	{
		return zzBuffer;
	}

	@Override
	public int getBufferEnd()
	{
		return zzEndRead;
	}

	public void reset(CharSequence buffer, int start, int end, int initialState)
	{
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
		myTokenType = null;
	}

	private void locateToken()
	{
		if(myTokenType != null)
		{
			return;
		}
		try
		{
			myState = yystate();
			myTokenType = advanceImpl();
		}
		catch(java.io.IOException e)
		{ /*Can't happen*/ }
		catch(Error e)
		{
			// add lexer class name to the error
			final Error error = new Error(getClass().getName() + ": " + e.getMessage());
			error.setStackTrace(e.getStackTrace());
			throw error;
		}
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext()
	{
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if(number > yylength())
		{
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF()
	{
		if(!zzEOFDone)
		{
			zzEOFDone = true;

		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advanceImpl() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while(true)
		{
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while(true)
				{

					if(zzCurrentPosL < zzEndReadL)
					{
						zzInput = zzBufferL.charAt(zzCurrentPosL++);
					}
					else if(zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					}
					else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if(eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						}
						else
						{
							zzInput = zzBufferL.charAt(zzCurrentPosL++);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if(zzNext == -1)
					{
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if((zzAttributes & 8) == 8)
						{
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
				case 9:
				{
					return CGTokens.RBRACE;
				}
				case 15:
					break;
				case 10:
				{
					return CGTokens.LBRACKET;
				}
				case 16:
					break;
				case 14:
				{
					return CGTokens.MACRO_KEYWORD;
				}
				case 17:
					break;
				case 12:
				{
					return CGTokens.BLOCK_COMMENT;
				}
				case 18:
					break;
				case 4:
				{
					return CGTokens.NUMBER_LITERAL;
				}
				case 19:
					break;
				case 6:
				{
					return CGTokens.LPAR;
				}
				case 20:
					break;
				case 13:
				{
					return CGTokens.LINE_COMMENT;
				}
				case 21:
					break;
				case 2:
				{
					return com.intellij.psi.TokenType.WHITE_SPACE;
				}
				case 22:
					break;
				case 5:
				{
					return CGTokens.STRING_LITERAL;
				}
				case 23:
					break;
				case 11:
				{
					return CGTokens.RBRACKET;
				}
				case 24:
					break;
				case 3:
				{
					CharSequence text = yytext();
					if(CGKeywords.KEYWORDS.contains(text.toString())) // toString is bad
					{
						return CGTokens.KEYWORD;
					}

					return CGTokens.TEXT;
				}
				case 25:
					break;
				case 8:
				{
					return CGTokens.LBRACE;
				}
				case 26:
					break;
				case 1:
				{
					return CGTokens.TEXT;
				}
				case 27:
					break;
				case 7:
				{
					return CGTokens.RPAR;
				}
				case 28:
					break;
				default:
					if(zzInput == YYEOF && zzStartRead == zzCurrentPos)
					{
						zzAtEOF = true;
						zzDoEOF();
						return null;
					}
					else
					{
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
